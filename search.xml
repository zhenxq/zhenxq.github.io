<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Git语法]]></title>
      <url>%2F2017%2F01%2F02%2FGit%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[Git是一个工具，由Linus花了两周时间，用C写的一个分布式版本控制系统。GitHub网站为开源项目免费提供Git存储。本文介绍Git的使用。 1.安装Git1.1 windows安装Git工具一：下载git for window，安装，然后在开始菜单里找到“Git”-&gt;“Git Bash工具二：下载git 官网工具，安装到 C 盘，将 git 目录下的 bin（如 C:\Program Files (x86)\Git\bin ）添加到 PATH 环境变量。 1.2 linux安装Git1234567$ yum install git-core # Fedora 上用 yum 安装：$ sudo apt-get install git # Ubuntu 这类 Debian 体系的系统上 $ sudo apt-get install git-core ＃ 老一点的Debian或Ubuntu Linux./config # 通过源码安装sudo makesudo make install 1.3 Mac OS X上安装Git方法一：安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档；方法二：直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode：选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。 2.git cofing 配置2.1 配置用户信息eg：--global是全局配置，配置某个版本仓库的时候不用加--global。12$ git config --global user.name &quot;&lt;Your Name&gt;&quot;$ git config --global user.email &quot;&lt;email@example.com&gt;&quot; 2.2 配置git显示命令的颜色1$ git config --global color.ui true 2.3 配置别名1234$ git config --global alias.st status $ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch 2.4 配置:打印版本历史记录–命令：git lg1$git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot; 3.SSH Key本地Git仓库和远程GitHub仓库之间的传输，需要SSH加密；创建SSH Key1$ ssh-keygen -t rsa -C &quot;自己的邮箱地址&quot; 用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件: id_rsa是私钥，不能泄露出去， id_rsa.pub是公钥，可以放心地告诉任何人。 登陆GitHub，打开“Account settings”,“SSH Keys”页面，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。这样就允许将本地代码push到github服务器。 4.Git的基本概念Git仓库简介工作区—-add—-&gt;暂存区(stage/index)—-commit—-&gt;版本库/仓库工作区：文件(新建/更改/删除)的地方；暂存区：add添加工作区的文件，对比工作区文件和仓库中当前版本文件的区别。版本库：commit一次性提交暂存区的文件到版本库，计算文件ID的地方，同时保存暂存区的信息。版本库有版本文件信息，暂存区文件对比的信息。 特性新创建的文件：untracked的状态（不能被仓库管理），git分支切换，版本切换，都影响不到这类文件。暂存区的文件：通过add添加的工作区新建的文件，此时文件是tracked的状态，准备好你就可以提交到仓库。 分支切换和版本切换：第一步记得要commit代码到仓库，或者stash保存当前被tracked的文件。否则文件会丢失，或者影响到新切换的环境的代码。 1.分支切换，会保留暂存区的未commit的文件； 2.版本切换(–hard):暂存区将会同步仓库。未commit的新创建的文件将会丢失，但是untracked的新建文件会保留。 分支切换$ git checkout 1.版本库中已经有的文件，在本地做了修改，那么在切换分支的时候，会提示commit或者stash后才能切换。2.新创建的文件（untracked/tracked），会随着分支的切换而切换。 版本切换$ git reset HEAD &lt;可选文件名&gt; # 恢复暂存区：（版本库–&gt;暂存区）数据同步，取消add（已经add的恢复为untracked的状态）。$ git reset –hard # 版本切换：（版本库–&gt;暂存区–&gt;工作区）数据同步。*工作区untracked的文件将会保留，tracked到暂存区的文件会消失（–hard）。 add和commit的特点 add工作区的可以是一个文件(git add filename)，也可以是除了.gitignore文件中忽略的其它多个文件（git add .）。 commit 一次性提交暂存区的所有文件。 工作区：1.有.git文件夹的地方；2.新创建的文件(untracked的状态)。 .git文件夹：1.包含：暂存区，版本库；2.所有 Git 需要的数据和资源都存放在这个目录中。 暂存区：1.add添加工作区的一个/多个文件，被添加到暂存区的文件是被tracked的状态；2.可以追踪对比文件的变化；3.一次性commit提交暂存区跟踪的所有的文件，以及文件变化信息到版本库。 版本库：1.由分支组成, 默认init时候,初始创建master分支，分支上可以添加多个代码版本；2.每个版本都有通过SHA算出来的文件集合的唯一ID，通过唯一ID可以切换当前使用的代码版本； 版本库中的：HEAD和ID1.HEAD是指针，可以指向不同版本，可以用来分支的快速合并，也可以切换当前环境中使用的版本。2.ID是每次commit提交的文件版本唯一标识，可以用来切换版本； tag标签1.tag标签关联一个版本的ID2.使用标签的目的：更加人性化的识别版本，可以快速的切换到指定的版本。 stash临时保存工作状态1.保存当前工作环境中，所有在暂存区中有记录的文件。（untracked的文件不会被stash保存）。2.stash的文件类型：tracked的文件（即add到暂存区的文件,或者是已经在版本库中文件，默认是tracked的状态）； 5.创建Git本地仓库:方法一：本地-初始化新仓库1234$git init # 初始化git仓库，生成.git文件夹，其中有暂存区(stage)，master主分支。$ git remote add origin https://xxx.git* origin远程仓库的别名，也可以写为别的名字。* origin的主干（master）已经完全可以在本地访问了，对应的名字是 origin/master， 方法二：直接克隆-远程仓库到本地1234$ git clone https://xxx.git$ git clone https://xxx.git [文件夹名]*默认本地仓库文件夹的名和远程的相同，可以指定新的文件夹名*远程分支可以是https协议、git协议 建立追踪关系Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)，本地的master分支自动”追踪”origin/master分支。Git也允许手动建立追踪关系:1git branch --set-upstream master origin/next # master分支追踪origin/next分支 6.对比文件1234567$git diff -- : 工作区&lt;---&gt;暂存区文件的区别$git diff : 工作区&lt;---&gt;暂存区文件的区别$git diff HEAD -- ：工作区&lt;---&gt;版本库的区别$git diff HEAD ：工作区&lt;---&gt;版本库的区别$git diff --cached/--staged: 暂存区---版本库的文件区别(git version &gt;= 1.6.1) 7.Git分支管理创建与合并分支123456789101112$ git branch # 查看分支$ git branch &lt;name&gt; # 创建分支$ git checkout &lt;name&gt; # 切换分支; 注意：git checkout -- filename 是将暂存区的文件检出，覆盖本地文件。$ git checkout -b &lt;name&gt; # 创建+切换分支$ git checkout -b dev origin/dev # 本地分支和远程版本库分支都创建dev分支$ git merge &lt;name&gt; # 合并&lt;name&gt;分支到当前分支*注意:合并的之前，记得要git checkout &lt;name&gt; 切换到当前分支。$ git branch -d &lt;name&gt; # 删除分支；$ git branch -D &lt;name&gt; # 强制删除分支；对于没有合并的分支，删除会失败，-D表示强制删除； 8.分支合并的模式分支合并之前，最好使用 git pull 将 “master” 分支的代码更新到最新。合并的模式： Fast-forward(快速模式)： master分支合并dev分支：master分支当前代码没有修改，dev分支是在master的状态下进行的代码衍进，只需要将HEAD指针从master直接向前移动到dev的代码版本就可以。然后dev版本在删除后，git log –graph中看不到dev分支的历史记录。如果禁用Faster forward模式，在git merge是时候，会生成一个新的commit,从分支历史上就可以看出分支信息。12--no-ff # 表示禁用Fast forward$ git merge --no-ff -m &quot;merge with no-ff&quot; dev 普通分支合并： master分支合并dev分支：master和dev的当前代码都有不同程度的修改，如果修改是同一行，那么就会有冲突，在合并的时候会有警告，修改完冲突后，再次commit到版本库。123456$ git merge dev * 返回： CONFLICT (content): 冲突的文件信息$ git status # 查看冲突的文件信息 * 找到冲突文件，打开修改&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;中的冲突内容。$ git add # 将解决冲突的文件添加到暂存区$ git commit # 将合并的版本提交到版本库 9.Git提交代码查看工作区文件状态（status）12345$ git status # 查看当前文件的状态；* “Untracked files:” # 工作区新创建的文件；* “Changes not staged for commit”: # 工作区修改了文件；* “Changes to be committed:”： # 暂存区有内容可以提交到仓库；* “ both modified” ： # 分支合并有文件修改冲突。 提交代码add&amp;commit123$ git add test.txt # 将工作区的文件--add--&gt;暂存区$ git commit -m &quot;提交说明&quot; # 暂存区--commit--&gt;版本库/仓库*每次修改，如果不把相应的文件add到暂存区，那么文件就不能commit到版本库中。 临时保存当前分支的工作区文件 当在dev分支开发的时候，临时需要修改其它分支的内容，如果不保存dev分支的当前状态，直接切换，工作区的内容会影响到新的分支的工作区文件，而且dev分支的工作区还得再次开发。stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。12345$ git stash # 隐藏当前的状态$ git stash list # 查看隐藏历史，可以有多次的stash历史（从最近到最远stash@&#123;0&#125;--&gt;）$ git stash apply 【可选的指定stash历史】# 恢复$ git stash drop # 删除$ git stash pop # 恢复+删除 查看当前添加的远程仓库12$ git remote -v* 返回（fetch）/(push);可以抓取和推送的分支，如果没有推送权限就看不到push 抓取远程仓库的代码，来补充本地没有的代码：12345678$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;$ git pull origin next:master # origin主机的next分支，与本地的master分支合并$ git pull origin next # 如果远程分支是与当前分支合并$ git pull origin # 当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名$ git pull # 如果当前分支只有一个追踪分支，连远程主机名都可以省略。 # 相当于两步 $ git fetch origin # 取回origin/next分支，next是默认主分支 $ git merge origin/next #origin/next分支与当前分支合并 删除文件123$rm test.txt # 删除工作区文件$git rm test.txt # 删除暂存区文件$git commit -m &quot;delete test.txt&quot; # 提交暂存区内容到版本库 推送到远程仓库 推送前最好拉取同步数据；1$ git pull # 由于本地和远程分支都有修改，可能会有文件的冲突，手动修改冲突后，add和commit push推送到服务器；1234567891011$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; # ：两边的分知名和pull时候相反* -u 参数：指定默认远程主机，例如origin,再次提交就可以直接使用git push$ git push -u origin master # 本地master分支推送到origin主机对应有追踪关系的master分支，同时指定origin为默认主机。$ git push origin master # master分支推送到origin主机的(同名)master分支，本地分支和远程分支有追踪关系，或者远程新建分支。$ git push origin # 当前分支推动到远程有追踪关系的分支。$ git push origin --tags # git push不会推送标签(tag)，除非使用–tags选项。删除远程分支: $ git push origin :master # 不写本地分支，表示删除远程分支 # 等同于 $ git push origin --delete master 3.示例：本地新建和远程新建分支–&gt;分支建立关联–&gt;拉取远程的代码(防止别人修改，有冲突）–&gt;commit本地仓库–&gt;push远程仓库1234$ git checkout -b dev origin/dev # 创建本地dev分支和远程origin仓库的dev分支$ git branch --set-upstream dev origin/dev # 新的用户，将他的dev分支和 远程仓库的dev关联$ git pull # 拉取分支的内容$ 修改冲突后commit.然后push。 10.版本操作查看版本信息12345678910111213$ git log # 查看commit的历史记录（由最近的到最远的时间点排序显示。）$ git log --pretty=oneline # 每次commit显示为一行 返回： commit id（SHA计算出来的版本号--可以使用在git reset --hard id开头的几个字符） Author: user.name &lt;user.email&gt; Date: commit的时间$ git log --graph --pretty=oneline$ git log --graph --pretty=oneline --abbrev-commitGit的版本指针HEAD: * HEAD:指向当前版本 * HEAD^:指向上一个版本 * HEAD^^:指向上上个版本 * HEAD~100：指向上100个版本 历史操作记录查询1$ git reflog # 可以查看到每一次的commit信息，每一个版本的id。 版本回退/撤销删除：版本库：HEAD/id暂存区：–（可省略）12345678$ git reset HEAD -- / git reset HEAD [可选文件] # 恢复暂存区的内容（版本库--&gt;暂存区）$ git reset --hard HEAD^ # 回退到上一个版本（版本库--&gt;工作区）$ git reset --hard 91bacc84d # 切换到制定的版本，版本id开头是91bacc84d$git checkout -- 文件名 # (暂存区--&gt;工作区) ，撤销工作区修改，必须指定文件名或者$git checkout 文件名 # 这个也是切换分支的语句，最好不用。 11.标签管理标签来指定版本库中确定的版本，不能够移动。 创建标签123456$ git checkout master # 切换到打标签的分支上$ git tag &lt;name&gt; # 给当前分支的当前版本打上一个标签&lt;name&gt; ,默认是HEAD$ git tag &lt;name&gt; &lt;id&gt; # 如果忘记打标签，可以找到commit-id，然后打上标签即可$ git tag -a &lt;name&gt; -m &quot;说明信息&quot; # 带有说明的标签$ git tag -s &lt;name&gt; # 指定一个带有私钥签名的标签，签名采用PGP签名，因此，必须首先安装gpg（GnuPG）$ git tag -s &lt;name&gt; -m &quot;说明&quot; id # 签名+标签+说明+指定版本id 显示标签1$ git show &lt;tagname&gt; # 查看指定的标签信息 删除标签1$ git tag -d &lt;tagname&gt; # 删除标签名为name的标签 推送标签到远程版本库12$ git push origin &lt;tagname&gt; # 推送本地name标签到远程origin版本库$ git push origin --tags # 次性推送全部尚未推送到远程的本地标签 删除远程标签12$ git tag -d &lt;tagname&gt; # 先删除本地name标签$ git push origin :refs/tags/&lt;tagname&gt; # 从远程删除name标签。删除命令也是push 12.参与github项目Fork项目点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：注意： 一定要从自己的账号下clone仓库，这样你才能推送修改。1git clone 项目的git地址增加/修改相应的内容，然后push到自己的仓库中。 让官方接受你的修改 可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。 13.gitigonre编辑.gitignore1.工作目录创建.gitigonre 文件，文件中设定git忽略的文件。忽略的文件，不放入版本库。2.可以参考的.gitigonre文件:gitignore语法： “/”:表示目录 “*”：表示通配符，即多个字符 “？”：表示单个字符 “[]”:可选列表 “！”：不忽略的内容 test/* # 忽略test文件夹下的内容，无论是/test/还是/one/test/ /test/ # 忽略指定的根目录下的内容 .py[cod] # 忽略.pyc、.pyo、.pyd dist # 忽略dist文件/目录 强制添加在.gitigonre中被忽略的文件12$ git check-ignore -v &lt;file-name&gt; # 查看没有添加的原因$ git add -f &lt;file-name&gt; # 使用“-f”强制添加 14.搭建Git服务器安装和配置git:12$ sudo apt-get install git # 安装git$ sudo adduser git # 创建git用户收集登录用户的公钥（id_rsa.pub）的内容，一个一行的放到/home/git/.ssh/authorized_keys如果是几百人的团队可以用Gitosis来管理公钥https://github.com/res0nat0r/gitosis 初始化git:12$ sudo git init --bare sample.git # 在当前目录下输入命令，创建一个裸仓库（没有工作区）$ sudo chown -R git:git sample.git # 把owner改为git禁用shell登录打开/etc/passwd1* git:x:1001:1001:,,,:/home/git:/bin/bash 修改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 克隆远程仓库1$ git clone git@server:/指定的目录/sample.git权限管理：git本身不支持，可以使用hook:https://github.com/sitaramc/gitolite]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MarkDown语法]]></title>
      <url>%2F2016%2F12%2F31%2FMarkDown%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[简介Markdown 是一种轻量级标记语言，目标是实现「易读易写」。本文介绍Markdown的语法。 标题(共六级)标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 1&lt;h1 id="user-content-锚点"&gt;标题就是对应的锚点&lt;/h1&gt; 引用引用通过开头的”&gt;”的个数，表示层级。最后一行为空行，结束引用。引用中可以使用其它的语法：标题，列表，代码块。引用12345&gt; 第一层&gt;&gt;第二层&gt;&gt;&gt;第三层&gt;&gt; 第一层 第一层 第二层 第三层 第一层 强调斜体、粗体、分割线12345*斜体*_斜体_**粗体**__粗体__~~文字删除线~~ 斜体粗体文字删除线 列表列表通过缩进表示层级；最后一行是空行结束列表。无序列表123- Red- Green - Blue Red Green Blue 有序列表1231. Red2. Green 3. Blue Red Green Blue 代码123代码写在```和```之间import sysprint(sys.platform) 连接连接12[连接标题](连接地址)&lt;连接地址&gt; python主页https://www.python.org/ 图片图片12345![图片的alt属性](连接地址) ![图片的alt属性](连接地址 &quot;图片名字&quot;) 图片引用：![图片的alt属性][id] [id]: 连接地址 &quot;图片名字&quot; 表格表格12345678First Header | Second Header | Third Header------------ | ------------- | ------------Content Cell | Content Cell | Content Cell在header下“：”的位置控制居中方式：First Header | Second Header | Third Header:----------- | :-----------: | -----------:Content Cell | Content Cell | Content Cell First Header Second Header Third Header Content Cell Content Cell Content Cell First Header Second Header Third Header Content Cell Content Cell Content Cell 分割线分割线123分割线上- - -分割线下 分割线上 分割线下 上下标上下标12\^表示上标, _表示下标。x^&#123;y^z&#125;=(1+&#123;\rm e&#125;^x)^&#123;-2xy^w&#125; x^{y^z}=(1+{\rm e}^x)^{-2xy^w}]]></content>
    </entry>

    
  
  
</search>
